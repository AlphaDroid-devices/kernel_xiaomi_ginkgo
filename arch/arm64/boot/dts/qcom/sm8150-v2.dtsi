/* Copyright (c) 2018, The Linux Foundation. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 */

#include "sm8150.dtsi"
#include "sm8150-v2-camera.dtsi"

/ {
	model = "Qualcomm Technologies, Inc. SM8150 V2";
	qcom,msm-name = "SM8150 V2";
	qcom,msm-id = <339 0x20000>;
};

/* Remove smmu nodes specific to SM8150 */
/delete-node/ &apps_smmu;
/delete-node/ &kgsl_smmu;

&mdss_rotator {
	smmu_rot_unsec: qcom,smmu_rot_unsec_cb {
		compatible = "qcom,smmu_sde_rot_unsec";
		iommus = <&apps_smmu 0x2040 0x0>;
	};
	smmu_rot_sec: qcom,smmu_rot_sec_cb {
		compatible = "qcom,smmu_sde_rot_sec";
		iommus = <&apps_smmu 0x2041 0x0>;
	};
};

&spss_utils {
	qcom,spss-dev-firmware-name  = "spss2d";	/* 8 chars max */
	qcom,spss-test-firmware-name = "spss2t";	/* 8 chars max */
	qcom,spss-prod-firmware-name = "spss2p";	/* 8 chars max */
};

&clock_gcc {
	compatible = "qcom,gcc-sm8150-v2", "syscon";
};

&clock_camcc {
	compatible = "qcom,camcc-sm8150-v2", "syscon";
};

&clock_dispcc {
	compatible = "qcom,dispcc-sm8150-v2", "syscon";
};

&clock_videocc {
	compatible = "qcom,videocc-sm8150-v2", "syscon";
};

&clock_npucc {
	compatible = "qcom,npucc-sm8150-v2", "syscon";
};
#include "msm-arm-smmu-sm8150-v2.dtsi"

&pcie0 {
	reg = <0x1c00000 0x4000>,
		<0x1c06000 0x1000>,
		<0x60000000 0xf1d>,
		<0x60000f20 0xa8>,
		<0x60001000 0x1000>,
		<0x60100000 0x100000>,
		<0x60200000 0x100000>,
		<0x60300000 0x3d00000>;
};

&pcie1 {
	reg = <0x1c08000 0x4000>,
		<0x1c0e000 0x2000>,
		<0x40000000 0xf1d>,
		<0x40000f20 0xa8>,
		<0x40001000 0x1000>,
		<0x40100000 0x100000>,
		<0x40200000 0x100000>,
		<0x40300000 0x1fd00000>;
};

&msm_vidc {
	qcom,allowed-clock-rates = <240000000 338000000
		365000000 444000000 533000000>;

	non_secure_cb {
		iommus = <&apps_smmu 0x2300 0x60>;
	};
	secure_bitstream_cb {
		iommus = <&apps_smmu 0x2301 0x4>;
	};
	secure_pixel_cb {
		iommus = <&apps_smmu 0x2303 0x20>;
	};
	secure_non_pixel_cb {
		iommus = <&apps_smmu 0x2304 0x60>;
	};
};

&msm_fastrpc {
	qcom,msm_fastrpc_compute_cb1 {
		iommus = <&apps_smmu 0x1001 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb2 {
		iommus = <&apps_smmu 0x1002 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb3 {
		iommus = <&apps_smmu 0x1003 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb4 {
		iommus = <&apps_smmu 0x1004 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb5 {
		iommus = <&apps_smmu 0x1005 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb6 {
		iommus = <&apps_smmu 0x1006 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb7 {
		iommus = <&apps_smmu 0x1007 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb8 {
		iommus = <&apps_smmu 0x1008 0x0460>;
	};

	qcom,msm_fastrpc_compute_cb9 {
		iommus = <&apps_smmu 0x1009 0x0460>;
	};
};

&energy_costs {
	CPU_COST_0: core-cost0 {
		busy-cost-data = <
			 300000 24
			 403200 25
			 499200 27
			 576000 29
			 672000 33
			 768000 37
			 844800 42
			 940800 47
			1036800 54
			1113600 59
			1209600 66
			1305600 73
			1382400 79
			1478400 88
			1555200 96
			1632000 105
			1708800 115
			1785600 128
		>;
		idle-cost-data = <
			22 18 14 12
		>;
	};

	CPU_COST_1: core-cost1 {
		busy-cost-data = <
			 710400 165
			 825600 195
			 940800 228
			1056000 264
			1171200 301
			1286400 339
			1401600 378
			1497600 411
			1612800 453
			1708800 491
			1804800 534
			1920000 594
			2016000 654
			2131200 740
			2227200 825
			2323200 920
			2419200 1022
		>;
		idle-cost-data = <
			100 80 60 40
		>;
	};

	CPU_COST_2: core-cost2 {
		busy-cost-data = <
			 825600 227
			 940800 262
			1056000 302
			1171200 348
			1286400 398
			1401600 451
			1497600 498
			1612800 556
			1708800 606
			1804800 655
			1920000 716
			2016000 766
			2131200 826
			2227200 878
			2323200 933
			2419200 992
			2534400 1075
			2649600 1179
			2745600 1288
			2841600 1427
		>;
		idle-cost-data = <
			130 110 90 70
		>;
	};

	CLUSTER_COST_0: cluster-cost0 {
		busy-cost-data = <
			 300000 3
			 403200 4
			 499200 4
			 576000 4
			 672000 5
			 768000 5
			 844800 6
			 940800 7
			1036800 8
			1113600 9
			1209600 10
			1305600 11
			1382400 12
			1478400 13
			1555200 14
			1632000 15
			1708800 16
			1785600 17
		>;
		idle-cost-data = <
			4 3 2 1
		>;
	};

	CLUSTER_COST_1: cluster-cost1 {
		busy-cost-data = <
			 710400 25
			 825600 26
			 940800 27
			1056000 28
			1171200 29
			1286400 30
			1401600 32
			1497600 34
			1612800 37
			1708800 40
			1804800 45
			1920000 50
			2016000 57
			2131200 64
			2227200 74
			2323200 90
			2419200 106
		>;
		idle-cost-data = <
			4 3 2 1
		>;
	};

	CLUSTER_COST_2: cluster-cost2 {
		busy-cost-data = <
			 825600 30
			 940800 33
			1056000 36
			1171200 39
			1286400 42
			1401600 46
			1497600 49
			1612800 55
			1708800 67
			1804800 77
			1920000 87
			2016000 100
			2131200 110
			2227200 120
			2323200 128
			2419200 135
			2534400 140
			2649600 147
			2745600 160
			2841600 180
		>;
		idle-cost-data = <
			4 3 2 1
		>;
	};
};
&gpu_opp_table {
	compatible = "operating-points-v2";

	opp-585000000 {
		opp-hz = /bits/ 64 <585000000>;
		opp-microvolt = <RPMH_REGULATOR_LEVEL_NOM>;
	};

	opp-427000000 {
		opp-hz = /bits/ 64 <427000000>;
		opp-microvolt = <RPMH_REGULATOR_LEVEL_SVS_L1>;
	};

	opp-345000000 {
		opp-hz = /bits/ 64 <345000000>;
		opp-microvolt = <RPMH_REGULATOR_LEVEL_SVS>;
	};

	opp-257000000 {
		opp-hz = /bits/ 64 <257000000>;
		opp-microvolt = <RPMH_REGULATOR_LEVEL_LOW_SVS>;
	};
};

/* GPU overrides */
&msm_gpu {
	/* Updated chip ID */
	qcom,chipid = <0x06040001>;

	/* Updated Bus Scale Settings */
	qcom,msm-bus,num-cases = <12>;

	/*
	 * Value for vote is: (DDR freq) * 4 - 5
	 * The 5 value is to ensure that there is no rounding errors
	 * where the total request doesn't divide evenly by the BCM
	 * DDR bandwidth unit (note, 5 is greater than this unit).
	 */
	qcom,msm-bus,vectors-KBps =
		<26 512 0 0>,          // 0 bus=0
		<26 512 0 795000>,     // 1 bus=200
		<26 512 0 1195000>,    // 2 bus=300
		<26 512 0 1799000>,    // 3 bus=451
		<26 512 0 2183000>,    // 4 bus=547
		<26 512 0 2719000>,    // 5 bus=681
		<26 512 0 3067000>,    // 6 bus=768
		<26 512 0 4063000>,    // 7 bus=1017
		<26 512 0 5407000>,    // 8 bus=1353
		<26 512 0 6215000>,    // 9 bus=1555
		<26 512 0 7211000>,    // 10 bus=1804
		<26 512 0 8363000>;    // 11 bus=2092

	qcom,gpu-pwrlevels {
		#address-cells = <1>;
		#size-cells = <0>;

		compatible = "qcom,gpu-pwrlevels";

		qcom,gpu-pwrlevel@0 {
			reg = <0>;
			qcom,gpu-freq = <585000000>;
			qcom,bus-freq = <7>;
			qcom,bus-min = <6>;
			qcom,bus-max = <8>;
		};

		qcom,gpu-pwrlevel@1 {
			reg = <1>;
			qcom,gpu-freq = <427000000>;
			qcom,bus-freq = <6>;
			qcom,bus-min = <5>;
			qcom,bus-max = <7>;
		};

		qcom,gpu-pwrlevel@2 {
			reg = <2>;
			qcom,gpu-freq = <345000000>;
			qcom,bus-freq = <3>;
			qcom,bus-min = <3>;
			qcom,bus-max = <5>;
		};

		qcom,gpu-pwrlevel@3 {
			reg = <3>;
			qcom,gpu-freq = <257000000>;
			qcom,bus-freq = <2>;
			qcom,bus-min = <1>;
			qcom,bus-max = <3>;
		};

		qcom,gpu-pwrlevel@4 {
			reg = <4>;
			qcom,gpu-freq = <0>;
			qcom,bus-freq = <0>;
			qcom,bus-min = <0>;
			qcom,bus-max = <0>;
		};
	};
};

/* NPU overrides */
&msm_npu {
	qcom,npu-pwrlevels {
		#address-cells = <1>;
		#size-cells = <0>;
		compatible = "qcom,npu-pwrlevels";
		initial-pwrlevel = <3>;
		qcom,npu-pwrlevel@0 {
			reg = <0>;
			clk-freq = <300000000
					19200000
					100000000
					19200000
					19200000
					300000000
					150000000
					19200000
					19200000
					60000000
					100000000
					37500000
					100000000
					19200000
					300000000
					19200000
					0
					0
					0
					0>;
		};
		qcom,npu-pwrlevel@1 {
			reg = <1>;
			clk-freq = <400000000
					19200000
					150000000
					19200000
					19200000
					400000000
					200000000
					37500000
					19200000
					120000000
					150000000
					75000000
					150000000
					19200000
					400000000
					19200000
					0
					0
					0
					0>;
		};
		qcom,npu-pwrlevel@2 {
			reg = <2>;
			clk-freq = <487000000
					19200000
					200000000
					19200000
					19200000
					487000000
					300000000
					37500000
					19200000
					240000000
					200000000
					150000000
					200000000
					19200000
					487000000
					19200000
					0
					0
					0
					0>;
		};
		qcom,npu-pwrlevel@3 {
			reg = <3>;
			clk-freq = <773000000
					19200000
					300000000
					19200000
					19200000
					773000000
					403000000
					75000000
					19200000
					240000000
					300000000
					150000000
					300000000
					19200000
					773000000
					19200000
					0
					0
					0
					0>;
		};
		qcom,npu-pwrlevel@4 {
			reg = <4>;
			clk-freq = <908000000
					19200000
					400000000
					19200000
					19200000
					908000000
					533000000
					75000000
					19200000
					300000000
					400000000
					150000000
					400000000
					19200000
					908000000
					19200000
					0
					0
					0
					0>;
		};
		/delete-node/ qcom,npu-pwrlevel@5;
	};
};
